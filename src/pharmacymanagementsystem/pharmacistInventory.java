/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pharmacymanagementsystem;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.RowSorter.SortKey;
import javax.swing.SortOrder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author chai
 */
public class pharmacistInventory extends javax.swing.JFrame {
    Pharmacist client = new Pharmacist();
    DefaultTableModel inventoryModel = new DefaultTableModel();
    
    /**
     * Creates new form menu
     */
    public pharmacistInventory() {
        initComponents();
        
        session_nameLabel.setText(client.getName());
        session_roleLabel.setText(client.getRoleName());
        
        inventoryModel = (DefaultTableModel) inventoryTable.getModel();
        
        // Restrict user to maximum 1 row selection at a time
        inventoryTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Allow table to be sortable through column headers (ID, Name, Company...)
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<> (inventoryModel);
        inventoryTable.setRowSorter(sorter);
        
        // By default, sort table by Name in ascending order
        List<SortKey> sortKeys = new ArrayList<>();   
        sortKeys.add(new SortKey(2, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        
        // Populate the table
        populateInventoryTable(client.getInventory());
        
        // Add years into Expiry Date filter combobox;
        for (String year : client.getInventoryYears()) {
            filter_yearCombo.addItem(year);
        }
        
        // Detect changes to searchField
        searchField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                sortTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                sortTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                sortTable();
            }
            
            public void sortTable() {
                try {
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchField.getText()));   
                } catch(Exception e) {
                    System.out.println("Error filtering based on searchField.");
                } finally {
                    System.out.println("Filtering table based on searchField.");
                }
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        filterGroup = new NoneSelectedButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        session_nameLabel = new javax.swing.JLabel();
        session_roleLabel = new javax.swing.JLabel();
        signOutButton = new javax.swing.JButton();
        newAccountButton = new javax.swing.JButton();
        addMedicineButton = new javax.swing.JButton();
        accountButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        header = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        searchField = new javax.swing.JTextField();
        searchResetButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        viewMedicineButton = new javax.swing.JButton();
        modifyMedicineButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        filter_monthCombo = new javax.swing.JComboBox<>();
        filter_expiryDateCheckbox = new javax.swing.JCheckBox();
        filter_yearCombo = new javax.swing.JComboBox<>();
        filter_expiryRuleCheckbox = new javax.swing.JCheckBox();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 0, 153));

        jPanel1.setBackground(new java.awt.Color(143, 252, 220));
        jPanel1.setAlignmentX(0.0F);
        jPanel1.setMaximumSize(new java.awt.Dimension(165, 32767));

        session_nameLabel.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        session_nameLabel.setText("Name");

        session_roleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        session_roleLabel.setText("Role");

        signOutButton.setText("Sign Out");
        signOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutButtonActionPerformed(evt);
            }
        });

        newAccountButton.setBackground(new java.awt.Color(184, 207, 229));
        newAccountButton.setText("Inventory");
        newAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAccountButtonActionPerformed(evt);
            }
        });

        addMedicineButton.setText("Add New Medicine");
        addMedicineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMedicineButtonActionPerformed(evt);
            }
        });

        accountButton.setText("Account Settings");
        accountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newAccountButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(signOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addMedicineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(accountButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(session_nameLabel)
                            .addComponent(session_roleLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(session_nameLabel)
                .addGap(1, 1, 1)
                .addComponent(session_roleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(accountButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(newAccountButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addMedicineButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(245, 245, 245));

        header.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        header.setText("Inventory");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Batch ID", "Name", "Company", "Expiry Date", "Manufacture Date", "Unit", "Price", "Quantity Left"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(inventoryTable);
        if (inventoryTable.getColumnModel().getColumnCount() > 0) {
            inventoryTable.getColumnModel().getColumn(0).setResizable(false);
        }

        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        searchResetButton.setText("Reset");
        searchResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchResetButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Quick Search (Anything!)");

        viewMedicineButton.setText("View Medicine");
        viewMedicineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMedicineButtonActionPerformed(evt);
            }
        });

        modifyMedicineButton.setText("Modify Medicine");
        modifyMedicineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyMedicineButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter by");

        filter_monthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        filter_monthCombo.setEnabled(false);
        filter_monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_monthComboActionPerformed(evt);
            }
        });

        filter_expiryDateCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        filterGroup.add(filter_expiryDateCheckbox);
        filter_expiryDateCheckbox.setText("Expiry date");
        filter_expiryDateCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filter_expiryDateCheckboxItemStateChanged(evt);
            }
        });
        filter_expiryDateCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_expiryDateCheckboxActionPerformed(evt);
            }
        });

        filter_yearCombo.setEnabled(false);
        filter_yearCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_yearComboActionPerformed(evt);
            }
        });

        filter_expiryRuleCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        filterGroup.add(filter_expiryRuleCheckbox);
        filter_expiryRuleCheckbox.setText("Expiring in 30 days");
        filter_expiryRuleCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_expiryRuleCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filter_expiryDateCheckbox)
                            .addComponent(jLabel2)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(viewMedicineButton)
                                .addGap(18, 18, 18)
                                .addComponent(modifyMedicineButton))
                            .addComponent(jLabel1)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchResetButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1044, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filter_expiryRuleCheckbox)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(filter_monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filter_yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchResetButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filter_expiryDateCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filter_monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filter_yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filter_expiryRuleCheckbox)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewMedicineButton)
                    .addComponent(modifyMedicineButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(header)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(header)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1355, 733));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void populateInventoryTable(List<Medicine> inventory) {
        inventoryModel.setRowCount(0);
        
        for (Medicine data : inventory) {
            Vector row = new Vector();
            row.add(data.getID());
            row.add(data.getBatchID());            
            row.add(data.getName());
            row.add(data.getCompany());
            row.add(data.getDOE());
            row.add(data.getDOM());
            row.add(data.getUnit());
            row.add(data.getPrice());
            row.add(data.getQuantity());            
            
            inventoryModel.addRow(row);
        }        
    }
    
    private void signOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutButtonActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to sign out?", "We're sad to see you go...", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            String message = client.logout();

            new login(message).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_signOutButtonActionPerformed

    private void accountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountButtonActionPerformed
        new pharmacistAccountSettings().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_accountButtonActionPerformed

    private void searchResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchResetButtonActionPerformed
        // Clear the fields including username's search field
        searchField.setText("");
    }//GEN-LAST:event_searchResetButtonActionPerformed

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased

    }//GEN-LAST:event_searchFieldKeyReleased

    private void viewMedicineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMedicineButtonActionPerformed
        String medicineID = getItemBySelectedRow(inventoryTable, 0);
        if (medicineID == null) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Opps!", JOptionPane.ERROR_MESSAGE);
            return;           
        }
        
        new pharmacistViewMedicine(medicineID).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_viewMedicineButtonActionPerformed

    private void filter_monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_monthComboActionPerformed
        int month = filter_monthCombo.getSelectedIndex();
        String year = filter_yearCombo.getSelectedItem().toString();
        
        populateInventoryTable(client.getInventory(year, month));
    }//GEN-LAST:event_filter_monthComboActionPerformed

    private void filter_expiryDateCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_expiryDateCheckboxActionPerformed

    }//GEN-LAST:event_filter_expiryDateCheckboxActionPerformed

    private void filter_expiryDateCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filter_expiryDateCheckboxItemStateChanged
        if (filter_expiryDateCheckbox.isSelected()) {
            int month = filter_monthCombo.getSelectedIndex();
            String year = filter_yearCombo.getSelectedItem().toString();

            populateInventoryTable(client.getInventory(year, month));            
            
            filter_monthCombo.setEnabled(true);
            filter_yearCombo.setEnabled(true);
        } else {
            if (!filter_expiryRuleCheckbox.isSelected()) {
                populateInventoryTable(client.getInventory());
            }
            
            filter_monthCombo.setEnabled(false);
            filter_yearCombo.setEnabled(false);
        }
    }//GEN-LAST:event_filter_expiryDateCheckboxItemStateChanged

    private void filter_yearComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_yearComboActionPerformed
        if (filter_expiryDateCheckbox.isSelected()) {
            String year = filter_yearCombo.getSelectedItem().toString();

            populateInventoryTable(client.getInventory(year));
        }
    }//GEN-LAST:event_filter_yearComboActionPerformed

    private void modifyMedicineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyMedicineButtonActionPerformed
        String medicineID = getItemBySelectedRow(inventoryTable, 0);
        if (medicineID == null) {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Opps!", JOptionPane.ERROR_MESSAGE);
            return;           
        }
        
        new pharmacistModifyMedicine(medicineID).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_modifyMedicineButtonActionPerformed

    private void addMedicineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMedicineButtonActionPerformed
        new pharmacistAddMedicine().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_addMedicineButtonActionPerformed

    private void filter_expiryRuleCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_expiryRuleCheckboxActionPerformed
        if (filter_expiryRuleCheckbox.isSelected()) {
            populateInventoryTable( client.getInventoryExpiring() );
        } else {
            if (!filter_expiryDateCheckbox.isSelected()) {
                populateInventoryTable( client.getInventory() );
            }
        }
    }//GEN-LAST:event_filter_expiryRuleCheckboxActionPerformed

    private void newAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAccountButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newAccountButtonActionPerformed
   
    String getItemBySelectedRow(JTable table, int col) {
        int row = table.getSelectedRow();

        if (row == -1) {
            return null;
        }

        return table.getValueAt(row, col).toString();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accountButton;
    private javax.swing.JButton addMedicineButton;
    private javax.swing.ButtonGroup filterGroup;
    private javax.swing.JCheckBox filter_expiryDateCheckbox;
    private javax.swing.JCheckBox filter_expiryRuleCheckbox;
    private javax.swing.JComboBox<String> filter_monthCombo;
    private javax.swing.JComboBox<String> filter_yearCombo;
    private javax.swing.JLabel header;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyMedicineButton;
    private javax.swing.JButton newAccountButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton searchResetButton;
    private javax.swing.JLabel session_nameLabel;
    private javax.swing.JLabel session_roleLabel;
    private javax.swing.JButton signOutButton;
    private javax.swing.JButton viewMedicineButton;
    // End of variables declaration//GEN-END:variables
}
